name: DevSecOps CI/CD Pipeline
 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
 
jobs:
  build_and_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4
 
      # --- Etapa de Setup para .NET ---
      - name: Configurar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
 
      - name: Restaurar dependências do .NET
        run: dotnet restore CSharpSprint3.sln
      # --- TAREFA 3: SCA - Análise de Componentes de Terceiros ---
 
      - name: Executar OWASP Dependency-Check (SCA)
        uses: dependency-check/action@v3
        id: dependency_check
        with:
          project: 'CSharpSprint3'
          format: 'ALL'
          failOnCVSS: 7
      - name: Upload do Relatório SCA como Artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: '**/dependency-check-report.*'
 
      # --- TAREFA 1: SAST - Análise Estática com Semgrep ---
      - name: Executar Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        id: semgrep
        with:
          config: auto
      - name: Upload de Resultados SAST para GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
 
      - name: Verificar Vulnerabilidades Críticas de SAST e SCA
        run: |
          echo "Verificando resultados de SAST e SCA... O job falhará se houver vulnerabilidades críticas"
 
  deploy_and_dast:
    needs: build_and_scan
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Ação de Deploy
        run: |
          echo "Simulando o deploy para o ambiente de staging..."
          # Substitua com sua ação de deploy real.
 
      # --- TAREFA 2: DAST - Testes Dinâmicos com OWASP ZAP ---
      - name: Executar ZAP Baseline Scan (DAST)
        id: zap_dast
        uses: zaproxy/action@v0.12.0
        with:
          target: 'https://url-do-seu-ambiente-de-staging.com' # IMPORTANTE: Substitua por sua URL real
      - name: Upload do Relatório ZAP como Artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: 'zap_report.html'
      # --- TAREFA 4: Integração e Monitoramento ---
      - name: Verificação de Vulnerabilidades Críticas DAST
        run: |
          echo "Verificação de vulnerabilidades DAST (dinâmicas) concluída. Por favor, analise o relatório para detalhes."
      - name: Notificação no Slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Pipeline de Segurança Finalizado!* :white_check_mark:\n\nUm novo código foi analisado e implantado. Verifique os relatórios de segurança."
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:* ${{ job.status }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Repositório:* ${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* ${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Acesse os Relatórios:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver logs e artefatos>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
