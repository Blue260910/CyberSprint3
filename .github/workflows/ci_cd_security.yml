name: CI/CD Security Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sast-sca:
    name: Análise Estática (SAST e SCA)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar jq
        run: sudo apt-get install -y jq

      # --- Tarefa 1: SAST (Semgrep) ---
      - name: Configurar Semgrep
        run: pip install semgrep
    
      - name: Executar Semgrep
        id: semgrep_scan
        run: semgrep --config "p/default" --exclude-rule "python.flask.security.audit.direct-template-output.direct-template-output" --json > semgrep-results.json || true
      
      - name: Gerar relatório SAST
        run: |
          echo "## Relatório de Análise SAST - Semgrep" >> $GITHUB_STEP_SUMMARY
          if [ -s semgrep-results.json ]; then
            echo "Vulnerabilidades encontradas (resumo):" >> $GITHUB_STEP_SUMMARY
            cat semgrep-results.json | jq '.results[] | .extra.message' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Relatório completo salvo como um artefato." >> $GITHUB_STEP_SUMMARY
          else
            echo "Nenhuma vulnerabilidade SAST encontrada." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Publicar relatório SAST como artefato
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json

      - name: Bloquear em caso de vulnerabilidades críticas
        run: |
          if [ $(cat semgrep-results.json | jq '.results | length') -gt 0 ]; then
            echo "Vulnerabilidades SAST encontradas. O build será bloqueado."
            exit 1
          fi

      - name: Executar Trivy (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: table
          output: trivy-report.txt

      - name: Publicar relatório SCA como artefato
        uses: actions/upload-artifact@v4
        with:
          name: trivy-dependency-report
          path: trivy-report.txt

      - name: Verificar resultados do SCA (bloqueio)
        run: |
          if grep -q "CRITICAL" trivy-report.txt; then
            echo "Vulnerabilidades SCA críticas encontradas. O build será bloqueado."
            exit 1
          fi

  # Job 2: Análise Dinâmica
  dynamic-analysis:
    name: Scan DAST com OWASP ZAP
    runs-on: ubuntu-latest
    needs: sast-sca
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      # CORREÇÃO: Usa o requirements.txt para garantir consistência
      - name: Instalar dependências do projeto
        run: pip install -r requirements.txt
      - name: Dar permissão de escrita para a pasta de trabalho
        run: chmod -R 777 .
      - name: Iniciar aplicação Flask e aguardar
        run: |
          echo "Iniciando servidor Flask..."
          python app.py &
          echo "Aguardando o servidor ficar pronto na porta 5000..."
          timeout 30s bash -c 'until curl -s http://localhost:5000 > /dev/null; do echo "Aguardando..." && sleep 1; done'
          echo "Servidor está pronto!"
      - name: Executar Scan DAST com ZAP via Docker
        run: |
          docker run \
            --network=host \
            -v $(pwd):/zap/wrk/:rw \
            --workdir /zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://localhost:5000 -r dast-report.html || true
      - name: Exibir o relatório DAST no log
        if: always()
        run: |
          echo "----------------- INÍCIO DO RELATÓRIO DAST -----------------"
          cat dast-report.html
          echo "------------------ FIM DO RELATÓRIO DAST -------------------"
