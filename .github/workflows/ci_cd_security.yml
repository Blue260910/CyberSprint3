name: CI/CD Security Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sast-sca:
    name: Análise Estática (SAST e SCA)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar jq
        run: sudo apt-get install -y jq

      # --- Tarefa 1: SAST (Semgrep) ---
      - name: Configurar Semgrep
        run: pip install semgrep
    
      - name: Executar Semgrep
        id: semgrep_scan
        run: semgrep --config "p/default" --exclude-rule "python.flask.security.audit.direct-template-output.direct-template-output" --json > semgrep-results.json || true
      
      - name: Gerar relatório SAST
        run: |
          echo "## Relatório de Análise SAST - Semgrep" >> $GITHUB_STEP_SUMMARY
          if [ -s semgrep-results.json ]; then
            echo "Vulnerabilidades encontradas (resumo):" >> $GITHUB_STEP_SUMMARY
            cat semgrep-results.json | jq '.results[] | .extra.message' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Relatório completo salvo como um artefato." >> $GITHUB_STEP_SUMMARY
          else
            echo "Nenhuma vulnerabilidade SAST encontrada." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Publicar relatório SAST como artefato
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json

      - name: Bloquear em caso de vulnerabilidades críticas
        run: |
          if [ $(cat semgrep-results.json | jq '.results | length') -gt 0 ]; then
            echo "Vulnerabilidades SAST encontradas. O build será bloqueado."
            exit 1
          fi

      - name: Executar Trivy (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: table
          output: trivy-report.txt

      - name: Publicar relatório SCA como artefato
        uses: actions/upload-artifact@v4
        with:
          name: trivy-dependency-report
          path: trivy-report.txt

      - name: Verificar resultados do SCA (bloqueio)
        run: |
          if grep -q "CRITICAL" trivy-report.txt; then
            echo "Vulnerabilidades SCA críticas encontradas. O build será bloqueado."
            exit 1
          fi

  dast:
    name: Testes DAST com OWASP ZAP
    runs-on: ubuntu-latest
    needs: sast-sca
    if: success()
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      
      - name: Configurar Docker e Docker Compose
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      
      - name: Subir a aplicação (exemplo com Docker Compose)
        run: docker compose up -d
      
      - name: Esperar a aplicação ficar online
        run: |
          while ! nc -z localhost 8080; do
            sleep 1
          done
      
      - name: Executar OWASP ZAP (ataque automatizado)
        run: |
          docker run -v ${{ github.workspace }}/zap-report:/zap/wrk/:rw ghcr.io/zaproxy/zaproxy zap-baseline.py -t http://host.docker.internal:8080 -r zap_report.html
      
      - name: Publicar relatório DAST como artefato
        uses: actions/upload-artifact@v4
        with:
          name: owasp-zap-dast-report
          path: zap-report/zap_report.html
      
      - name: Verificar se há alertas críticos (bloqueio)
        run: |
          if grep -q "Critical" zap-report/zap_report.html; then
            echo "Vulnerabilidades DAST críticas encontradas. O build será bloqueado."
            exit 1
          fi
