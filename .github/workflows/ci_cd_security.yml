name: CI/CD Security Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sast-sca:
    name: An√°lise Est√°tica (SAST e SCA)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Instalar jq
        run: sudo apt-get install -y jq

      # --- Tarefa 1: SAST (Semgrep) ---
      - name: Configurar Semgrep
        run: pip install semgrep

      - name: Executar Semgrep
        id: semgrep_scan
        run: semgrep --config "p/default" --exclude-rule "python.flask.security.audit.direct-template-output.direct-template-output" --json > semgrep-results.json || true

      - name: Gerar relat√≥rio SAST
        run: |
          echo "## Relat√≥rio de An√°lise SAST - Semgrep" >> $GITHUB_STEP_SUMMARY
          if [ -s semgrep-results.json ]; then
            echo "Vulnerabilidades encontradas (resumo):" >> $GITHUB_STEP_SUMMARY
            cat semgrep-results.json | jq '.results[] | .extra.message' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Relat√≥rio completo salvo como um artefato." >> $GITHUB_STEP_SUMMARY
          else
            echo "Nenhuma vulnerabilidade SAST encontrada." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Publicar relat√≥rio SAST como artefato
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json

      - name: Bloquear em caso de vulnerabilidades cr√≠ticas
        run: |
          if [ $(cat semgrep-results.json | jq '.results | length') -gt 0 ]; then
            echo "Vulnerabilidades SAST encontradas. O build ser√° bloqueado."
            exit 1
          fi

      - name: Executar Trivy (SCA)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: table
          output: trivy-report.txt

      - name: Publicar relat√≥rio SCA como artefato
        uses: actions/upload-artifact@v4
        with:
          name: trivy-dependency-report
          path: trivy-report.txt

      - name: Verificar resultados do SCA (bloqueio)
        run: |
          if grep -q "CRITICAL" trivy-report.txt; then
            echo "Vulnerabilidades SCA cr√≠ticas encontradas. O build ser√° bloqueado."
            exit 1
          fi

  dynamic-analysis:
    name: Scan DAST com OWASP ZAP
    runs-on: ubuntu-latest
    needs: sast-sca
    outputs:
      HIGH: ${{ steps.extract.outputs.HIGH }}
      MEDIUM: ${{ steps.extract.outputs.MEDIUM }}
      LOW: ${{ steps.extract.outputs.LOW }}
      INFO: ${{ steps.extract.outputs.INFO }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Instalar depend√™ncias do projeto
        run: pip install -r requirements.txt

      - name: Dar permiss√£o de escrita para a pasta de trabalho
        run: chmod -R 777 .

      - name: Iniciar aplica√ß√£o Flask e aguardar
        run: |
          echo "Iniciando servidor Flask..."
          python app.py &
          echo "Aguardando o servidor ficar pronto na porta 5000..."
          timeout 30s bash -c 'until curl -s http://localhost:5000 > /dev/null; do echo "Aguardando..." && sleep 1; done'
          echo "Servidor est√° pronto!"

      - name: Executar Scan DAST com ZAP via Docker
        run: |
          docker run \
            --network=host \
            -v $(pwd):/zap/wrk/:rw \
            --workdir /zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://localhost:5000 -r dast-report.html || true

      - name: Publicar relat√≥rio DAST como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: dast-report.html

      - name: Resumo do DAST
        if: always()
          run: |
            echo "## Relat√≥rio DAST - OWASP ZAP" >> $GITHUB_STEP_SUMMARY
            if grep -q "FAIL-NEW" dast-report.html; then
              echo "‚ö†Ô∏è Vulnerabilidades encontradas" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ Nenhuma vulnerabilidade encontrada" >> $GITHUB_STEP_SUMMARY

      - name: Extrair resumo de alertas DAST
        id: extract
        if: always()
        run: |
          HIGH=$(grep -A1 'High' dast-report.html | tail -n1 | sed 's/<[^>]*>//g' | tr -d ' ')
          MEDIUM=$(grep -A1 'Medium' dast-report.html | tail -n1 | sed 's/<[^>]*>//g' | tr -d ' ')
          LOW=$(grep -A1 'Low' dast-report.html | tail -n1 | sed 's/<[^>]*>//g' | tr -d ' ')
          INFO=$(grep -A1 'Informational' dast-report.html | tail -n1 | sed 's/<[^>]*>//g' | tr -d ' ')
          echo "::set-output name=HIGH::$HIGH"
          echo "::set-output name=MEDIUM::$MEDIUM"
          echo "::set-output name=LOW::$LOW"
          echo "::set-output name=INFO::$INFO"

  notify-discord:
    name: Notificar no Discord
    runs-on: ubuntu-latest
    needs: dynamic-analysis
    if: always()
    steps:
      - name: Notificar no Discord (Embed com resumo DAST)
        run: |
            STATUS="‚úÖ Build e testes conclu√≠dos!"
            COLOR=3066993
            if [[ "${{ needs.dynamic-analysis.result }}" != "success" ]]; then
              STATUS="‚ùå Pipeline falhou!"
              COLOR=15158332
            fi

            URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            HIGH="${{ needs.dynamic-analysis.outputs.HIGH }}"
            MEDIUM="${{ needs.dynamic-analysis.outputs.MEDIUM }}"
            LOW="${{ needs.dynamic-analysis.outputs.LOW }}"
            INFO="${{ needs.dynamic-analysis.outputs.INFO }}"
            DAST_SUMMARY="üö® DAST: Erros encontrados: \nüî¥ High: $HIGH \nüü† Medium: $MEDIUM \nüü° Low: $LOW \nüîµ Info: $INFO"

            curl -H "Content-Type: application/json" \
              -d '{
                "embeds": [{
                  "title": "Pipeline CI/CD",
                  "description": "'"$STATUS"'\n"'"$DAST_SUMMARY"'\nüìÑ [Veja os relat√≥rios aqui]('"$URL"')",
                  "color": '"$COLOR"'
                }]
              }' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
